#define _GNU_SOURCE
#include <stdio.h>
#include <linux/userfaultfd.h>
#include <pthread.h>
#include <errno.h>
#include <unistd.h>
#include <stdlib.h>
#include <fcntl.h>
#include <signal.h>
#include <poll.h>
#include <string.h>
#include <sys/mman.h>
#include <sys/syscall.h>
#include <sys/ioctl.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <poll.h>
#include <netinet/in.h>
#include <netinet/tcp.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <pthread.h>

#define MAX_SIZE 4096

#define errExit(msg)    do { perror(msg); exit(EXIT_FAILURE);   \
        } while (0)


void *server_socket();
void *client_socket();
void *machine_order();

int order;


int main(int argc, char *argv[])
{
  pthread_t serv_thread;
  pthread_t cli_thread;

  char *serv_num;
  char *cli_num;
  //  int *check;

  serv_num = argv[1];
  cli_num = argv[2];  

  //machine_order(cli_num);

  pthread_create( &serv_thread, NULL, server_socket, (void *)serv_num);
  pthread_create( &cli_thread, NULL, client_socket, (void *)cli_num);
  
  printf("Server Port %s | Client Port %s | Machine # %d \n\n", serv_num, cli_num, order);
  pthread_join( serv_thread, NULL);  
  pthread_join( cli_thread, NULL);  
    
  return 0;
}
/*
void *machine_order(void* client_port)
{
  struct sockaddr_in temp_addr;
  int cli_port = atoi(client_port);
  int temp_fd;
 
  if ((temp_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
    perror("socket failed");
    exit(EXIT_FAILURE);
  }
  printf("\nChecking port = %d\n", cli_port);
  temp_addr.sin_family = AF_INET;
  if(inet_aton("127.0.0.1", &temp_addr.sin_addr) <= 0)
    {
      printf("\nInvalid Address | Address not supported \n");
      exit(1);
    }
  temp_addr.sin_port = htons(cli_port);
  if ((connect(temp_fd, (struct sockaddr *)&temp_addr, sizeof(temp_addr))) < 0)
    {
      order = 1;
      printf("Set it to 1\n");
    }
  else
    {
      order = 2;
      printf("Set it to 2\n");
    }
  close(temp_fd);
  return 0;
}
*/


void *server_socket(void *portnum)
{
  char* addr;
  struct sockaddr_in serv_addr, cli_addr;
  
  int opt = 1;
  int server_fd, new_socket, client_size, mem_size;
  int port = atoi(portnum);

  printf("Server Socket with port = %d\n", port );  
  if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
    perror("socket failed");
    exit(EXIT_FAILURE);
  }
  
  if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT,
		 &opt, sizeof(opt))) {
    perror("setsockopt");
    exit(EXIT_FAILURE);
  }
  memset(&serv_addr, 0, sizeof(serv_addr));
  serv_addr.sin_family = AF_INET;
  serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);
  serv_addr.sin_port = htons( port );

  if (bind(server_fd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {
    perror("bind failed");
    
  }
  if (listen(server_fd, 3) < 0) {
    perror("listen");

  }
  client_size = sizeof(struct sockaddr_in);
  printf("Here\n");  
  if( (new_socket = accept(server_fd, (struct sockaddr *)&cli_addr, (socklen_t*)&client_size)) )
    {
      printf("Order number is %d\n", order);
      if (order == 1)
	{
	  sleep(1);
	  printf("Enter the memory size: ");
	  scanf("%d", &mem_size);
	  addr = mmap(NULL, mem_size, PROT_READ | PROT_WRITE,
		      MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
	  if (addr == MAP_FAILED)
	    {
	      errExit("mmap");
	    }
	  printf("Address returned by mmap() = %p\n", addr);
	  int i = write(new_socket, &addr, sizeof(addr));
	  printf("Sent %d\n", i);
	}
     
    }
  //  close(server_fd);
  return 0;
}

void *client_socket(void *portnum)
{
  struct sockaddr_in serv_addr;
  int port;
  port = atoi(portnum);
  int client_fd;
  char *buffer;
 
  if ((client_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
    perror("socket failed");
    exit(EXIT_FAILURE);
  }
  printf("\nClient Socket with port = %d\n", port);
  serv_addr.sin_family = AF_INET;
  if(inet_aton("127.0.0.1", &serv_addr.sin_addr) <= 0)
    {
      printf("\nInvalid Address | Address not supported \n");
      exit(1);
    }
  serv_addr.sin_port = htons(port);
  if ((connect(client_fd, (struct sockaddr *)&serv_addr, sizeof(serv_addr))) < 0)
    {
      order = 1;
      while ((connect(client_fd, (struct sockaddr *)&serv_addr, sizeof(serv_addr))) < 0)
	{
	  printf("\nConnection Failed \n");
	  sleep(1);
	} 
    }
  else
    {
      order = 2;
    }
    printf("Connection Established with %d\n", port);

  if (order == 2)
    {
      read(client_fd, &buffer, sizeof(buffer));
      printf("Reading from the machine #1 %d %p\n", port, buffer );
    }
 
  return 0;
}

