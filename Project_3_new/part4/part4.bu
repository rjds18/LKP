#define _GNU_SOURCE
#include <stdio.h>
#include <linux/userfaultfd.h>
#include <pthread.h>
#include <errno.h>
#include <unistd.h>
#include <stdlib.h>
#include <fcntl.h>
#include <signal.h>
#include <poll.h>
#include <string.h>
#include <sys/mman.h>
#include <sys/syscall.h>
#include <sys/ioctl.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <poll.h>
#include <netinet/in.h>
#include <netinet/tcp.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <pthread.h>

#define MAX_SIZE 4096

#define errExit(msg)    do { perror(msg); exit(EXIT_FAILURE);   \
        } while (0)

//variables
char* serv_num; //server port from the cmd line
char* cli_num;  //client port from the cmd line
int mch_num;    //machine number (1 | 2);
char* addr;     //mmap address setting globally to easily share
char commands;  //this will be used for menu() - only used in the client

int pf_chk;
pthread_t pf_thread; //pagefault thread for both mch 1 and mch 2
long init_uffd; //uffd which will be used for the pagefault thread

static int page_size; //page size which will be used for pagefault
struct uffdio_api uffdio_api;
struct uffdio_register uffdio_register;

typedef struct {
  char *addr;
  long page_num;
  ssize_t page_count;
} proc_info;

void *server_socket();
void *client_socket();
void *menu();
void *fault_handler_thread();

proc_info temp_data; //this is temp data which mch 2 will use to initialize its own addr for mmap


int main(int argc, char *argv[])
{
  pthread_t serv_thread, cli_thread;
  int serv_chk, cli_chk;
  serv_num = argv[1];
  cli_num = argv[2];
 
  serv_chk = pthread_create( &serv_thread, NULL, server_socket, (void *)serv_num);
  if (serv_chk != 0) {
    errno = serv_chk;
    errExit("pthread_create");
  }
  cli_chk = pthread_create( &cli_thread, NULL, client_socket, (void *)cli_num);
  if (cli_chk != 0) {
    errno = cli_chk;
    errExit("pthread_create");
  }
  pthread_join( cli_thread, NULL); pthread_join( serv_thread, NULL); 
}
void* fault_handler_thread(void *arg)
{
        static struct uffd_msg msg;   /* Data read from userfaultfd */
        long uffd;                    /* userfaultfd file descriptor */
        char *page = NULL;
        struct uffdio_copy uffdio_copy;
        ssize_t nread;
        uffd = (long) arg;
        if (page == NULL) {
                page = mmap(NULL, page_size, PROT_READ | PROT_WRITE,
                            MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
		memset(page, '\0', sizeof(char));
                if (page == MAP_FAILED)
                        errExit("mmap");
		
        }
	 for (;;) {
          struct pollfd pollfd;
          int nready;
          pollfd.fd = uffd;
          pollfd.events = POLLIN;
          nready = poll(&pollfd, 1, -1);
          if (nready == -1)
            errExit("poll");
          printf("\n[x] PAGEFAULT\n");
	  nread = read(uffd, &msg, sizeof(msg));
          if (nread == 0) {
            printf("EOF on userfaultfd!\n");
            exit(EXIT_FAILURE);           }
          if (nread == -1)
            errExit("read");
          if (msg.event != UFFD_EVENT_PAGEFAULT) {
            fprintf(stderr, "Unexpected event on userfaultfd\n");
            exit(EXIT_FAILURE);          }
          uffdio_copy.src = (unsigned long) page;
          uffdio_copy.dst = (unsigned long) msg.arg.pagefault.address &
            ~(temp_data.page_count - 1);
          uffdio_copy.len = page_size;
          uffdio_copy.mode = 0;
          uffdio_copy.copy = 0;

          if (ioctl(uffd, UFFDIO_COPY, &uffdio_copy) == -1)
            errExit("ioctl-UFFDIO_COPY");

	}
}



void *menu()
{
  long access_page; //calculate the address of which page will be read
  char* reading = malloc(sizeof(char));           //char being read
  long base_addr = 0x0;
  int invalid = 0;
  char* message = malloc(sizeof(char));
  do {
    if (mch_num == 1) { while((getchar()) != '\n'); }
    printf("Please enter the command < Read = r | Write = w | View = v | Quit = q > : ");
    scanf("%c", &commands);
    if (commands == 'r')
      {
	printf("For which page? (0-%ld, or -1 for all): ", temp_data.page_count-1);
	scanf("%ld", &temp_data.page_num);
	access_page = base_addr + (temp_data.page_num * page_size);
	//	char c = addr[access_page];
	//read the first address
	printf("The value of access_page: %ld\n", access_page);
	//reading = &addr[base_addr];
	if (invalid == 0)
	  {
	    memset(addr + access_page, '\0', sizeof(char));
	    invalid = 1;
	  }
	printf("Reading the page %s\n", &addr[access_page]);
      }
    else if (commands == 'w')
      {
	printf("For which page? (0-%ld, or -1 for all): ", temp_data.page_count-1);
	scanf("%ld", &temp_data.page_num);
	access_page = base_addr + (temp_data.page_num * page_size);
	while((getchar()) != '\n');
	printf("Enter your message: ");
	scanf("%[^\n]s", message);
	memcpy(addr+access_page, message, strlen(message));
	printf("Writing %s\n", &addr[access_page]);
      }
    else if (commands == 'v')
      {
	printf("View\n");
      }
    if (mch_num == 2) { while((getchar()) != '\n'); }
  } while (commands != 'q');
  if (commands == 'q')
    {  exit(1);    }
  return 0;
}
// 
void *server_socket(void *portnum)
{
  struct sockaddr_in address; //specifying address to connect a socket
  proc_info recv_data;        //data which will be received from the client
  int server_fd, new_socket;  //server file descriptor / new-socket
  int port = atoi(portnum);
  int opt = 1;
  int addrlen = sizeof(address);
  
  printf("Server Socket with port = %d\n", port);  
  if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
    perror("socket failed");
    exit(EXIT_FAILURE);
  } // create socket for server_fd
  if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT,
		 &opt, sizeof(opt))) {
    perror("setsockopt");
    exit(EXIT_FAILURE);
  } // set socket option for server_fd
  
  address.sin_family = AF_INET;
  address.sin_addr.s_addr = htonl(INADDR_ANY);
  address.sin_port = htons( port );
  
  if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {
    perror("bind failed");
    exit(1);
  } // binding socket described in server_fd to the addr
  
  if (listen(server_fd, 3) < 0) {
    perror("listen");
    exit(1);
  } // marks the socket server_fd as a passive socket which will listen for client
  
  printf("Trying to connect ... \n");
  
  if( (new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen)) )
    {
      printf("Connection accepted\n");     
    }
  if (mch_num == 2)
    {
      // first time listening to the machine 1 for the info regarding page_size + mmap
      printf("waiting for the initial data from the mch #1\n");
      read(new_socket, &temp_data, sizeof(proc_info));
      /* after receiving the data, this is where magic will begin with pagefault */
      page_size = sysconf(_SC_PAGE_SIZE);
      unsigned long len = temp_data.page_count * page_size;
      addr = mmap(temp_data.addr, len, PROT_READ | PROT_WRITE,
		  MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
      printf("mmap generated address %p\n", addr);
      
      init_uffd = syscall(__NR_userfaultfd, O_CLOEXEC | O_NONBLOCK);
      if (init_uffd == -1)
	errExit("userfaultfd");
      uffdio_api.api = UFFD_API;
      uffdio_api.features = 0;
      if (ioctl(init_uffd, UFFDIO_API, &uffdio_api) == -1)
	errExit("ioctl-UFFDIO_API");
      uffdio_register.range.start = (unsigned long) addr;
      uffdio_register.range.len = len;
      uffdio_register.mode = UFFDIO_REGISTER_MODE_MISSING;
      if (ioctl(init_uffd, UFFDIO_REGISTER, &uffdio_register) == -1)
	errExit("ioctl-UFFDIO_REGISTER");
    }  
  for (;;)
    {
      int check;
      if ((check = read(new_socket, &recv_data , sizeof(proc_info)) <= 0))
	{ printf("Client disconnected, exiting...\n");	  exit(1); }
      printf("Server %d is keep listening\n", mch_num);
    }
  /*-----------------need to add decoder to deal with received data-----------*/
  return 0;
}

void *client_socket(void *portnum)
{
  struct sockaddr_in serv_addr;
  proc_info send_data; //this will primarily be used from client to send data to the other serv
  int port = atoi(portnum);
  int client_fd;
  /*------------------setting up sockets----------------------*/
  if ((client_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
    perror("socket failed");
    exit(EXIT_FAILURE);
  }
  printf("\nClient Socket with port = %d\n", port);
  serv_addr.sin_family = AF_INET;
  if(inet_aton("127.0.0.1", &serv_addr.sin_addr) <= 0)
    {
      printf("\nInvalid Address | Address not supported \n");
      exit(1);
    }
  serv_addr.sin_port = htons(port);
  if ((connect(client_fd, (struct sockaddr *)&serv_addr, sizeof(serv_addr))) < 0)
    {
      //checks first for the connection, if it reaches this state, that means mch = 1;
      //otherwise, it will be mch_num = 2
      mch_num = 1;
      while ((connect(client_fd, (struct sockaddr *)&serv_addr, sizeof(serv_addr))) < 0) {
          printf("\nConnection Failed \n");
          sleep(1); } }
  else
    {      mch_num = 2;   }

  if(mch_num == 1) //this is the first time initialization of mmap for #1 and #2. 
    {
      printf("Enter the page count: ");
      scanf("%lu", &send_data.page_count);
      temp_data.page_count = send_data.page_count; //keeping temp updated as well
      page_size = sysconf(_SC_PAGE_SIZE);
      unsigned long len = send_data.page_count * page_size;
      addr = mmap(NULL, len, PROT_READ | PROT_WRITE,
		  MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
      send_data.addr = addr;
      if (send_data.addr == MAP_FAILED)
	{ printf("Failed\n"); errExit("mmap"); }
      printf("mmap generated address %p \n", addr);
      send(client_fd, &send_data, sizeof(proc_info), 0);
      init_uffd = syscall(__NR_userfaultfd, O_CLOEXEC | O_NONBLOCK);
      if (init_uffd == -1)
	errExit("userfaultfd");
      uffdio_api.api = UFFD_API;
      uffdio_api.features = 0;
      if (ioctl(init_uffd, UFFDIO_API, &uffdio_api) == -1)
	errExit("ioctl-UFFDIO_API");
      uffdio_register.range.start = (unsigned long) addr;
      uffdio_register.range.len = len;
      uffdio_register.mode = UFFDIO_REGISTER_MODE_MISSING;
      if (ioctl(init_uffd, UFFDIO_REGISTER, &uffdio_register) == -1)
	errExit("ioctl-UFFDIO_REGISTER");
    }
  else
    {  do { /*waiting*/ printf("waiting\n"); sleep(3); }while(addr == NULL); }  
  /*--------------------setting up menu----------------------*/

  pf_chk = pthread_create(&pf_thread, NULL, fault_handler_thread, (void *) init_uffd);
  if(pf_chk != 0)
    {      errno = pf_chk; errExit("pthread_create");     }
  

  menu();  
  return 0;
}

